#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0) uniform samplerCube envMap;
layout(binding = 1, rgba32f) writeonly uniform imageCube irradianceMap;

const float PI = 3.1415926535897932384626433832795;

vec3 CubeCoordinateToWorld(ivec3 cubeCoordinate, vec2 cubemapSize);

layout(push_constant) uniform PushConstants
{
	vec2 cubemapSize;
	float deltaPhi;
	float deltaTheta;
};


void main()
{   
    ivec3 cubeCoord = ivec3(gl_GlobalInvocationID);
    vec3 worldPos = CubeCoordinateToWorld(cubeCoord, cubemapSize);
    
	// tangent space from origin point
    vec3 normal = normalize(worldPos);
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 right = normalize(cross(up, normal));
    up = cross(normal, right);


	const float TWO_PI = PI * 2.0;
	const float HALF_PI = PI * 0.5;
	const float totalSamples = (TWO_PI / deltaPhi) * (HALF_PI / deltaTheta); 
	const float invTotalSamples = 1.0 / totalSamples;

    vec3 irradiance = vec3(0.0);
	uint samplerCount = 0u;

    for(float phi = 0.0; phi < TWO_PI; phi += deltaPhi)
    {
        float sinPhi = sin(phi);
        float cosPhi = cos(phi);
        
        for(float theta = 0.0; theta < HALF_PI; theta += deltaTheta)
        {
            float sinTheta = sin(theta);
            float cosTheta = cos(theta);

            // spherical to cartesian, in tangent space
            vec3 sphereCoord = vec3(sinTheta * cosPhi,  sinTheta * sinPhi, cosTheta);
            // tangent space to world
            vec3 sampleVec = sphereCoord.x * right + sphereCoord.y * up + sphereCoord.z * normal; 

            irradiance += texture(envMap, sampleVec).rgb * cosTheta * sinTheta;
			samplerCount++;
        }
    }
    irradiance = PI * irradiance / float(samplerCount);

    imageStore(irradianceMap, cubeCoord, vec4(irradiance, 1.0));
}

vec3 CubeCoordinateToWorld(ivec3 cubeCoordinate, vec2 cubemapSize)
{
	vec2 textureCoordinate = vec2(cubeCoordinate.xy) / (cubemapSize - vec2(1.0));
	textureCoordinate = textureCoordinate * 2.0 - 1.0;

	switch(cubeCoordinate.z)
	{
		case 0:
			return vec3(1.0, -textureCoordinate.yx);
		case 1:
			return vec3(-1.0, -textureCoordinate.y, textureCoordinate.x);
		case 2:
			return vec3(textureCoordinate.x, 1.0, textureCoordinate.y);
		case 3:
			return vec3(textureCoordinate.x, -1.0, -textureCoordinate.y);
		case 4:
			return vec3(textureCoordinate.x, -textureCoordinate.y, 1.0);
		case 5:
			return vec3(-textureCoordinate.xy, -1.0);

	}

	return vec3(0.0);
}